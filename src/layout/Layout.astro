---
const { title } = Astro.props;
import Navbar from '../components/navbar/Navbar.astro';
import style from './Layout.module.css';
---
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{title}</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg">
    <!-- Prevent flash of unstyled content -->
    <script is:inline>
      // Set theme before page renders to prevent flash
      (function() {
        const savedTheme = localStorage.getItem('theme');
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const theme = savedTheme || (prefersDark ? 'dark' : 'light');
        document.documentElement.setAttribute('data-theme', theme);
      })();
    </script>
  </head>
  <body class={style.body}>
    <div class={style.container}>
        <Navbar />
      <main class={style.main}>
        <slot />
      </main>
      <footer class={style.footer}>
        <p>&copy; {new Date().getFullYear()} My Portfolio</p>
      </footer>
    </div>
    <!-- Load theme script -->
    <script>
      // Theme toggle functionality
      function initTheme() {
        const themeToggle = document.querySelector('[class*="themeToggle"]');
        const themeIcon = document.querySelector('[class*="themeIcon"]');
        
        // Check for saved theme preference or default to light mode
        const savedTheme = localStorage.getItem('theme');
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const theme = savedTheme || (prefersDark ? 'dark' : 'light');
        
        // Apply initial theme
        document.documentElement.setAttribute('data-theme', theme);
        updateIcon(theme);
        
        // Toggle theme function
        function toggleTheme() {
          const currentTheme = document.documentElement.getAttribute('data-theme');
          const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
          
          document.documentElement.setAttribute('data-theme', newTheme);
          localStorage.setItem('theme', newTheme);
          updateIcon(newTheme);
        }
        
        // Update icon based on theme
        function updateIcon(theme: string) {
          if (!themeIcon) return;
          if (theme === 'dark') {
            // Moon icon for dark mode
            themeIcon.innerHTML = `
              <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
            `;
          } else {
            // Sun icon for light mode (your existing icon)
            themeIcon.innerHTML = `
              <circle cx="12" cy="12" r="5"></circle>
              <line x1="12" y1="1" x2="12" y2="3"></line>
              <line x1="12" y1="21" x2="12" y2="23"></line>
              <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
              <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
              <line x1="1" y1="12" x2="3" y2="12"></line>
              <line x1="21" y1="12" x2="23" y2="12"></line>
              <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
              <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
            `;
          }
        }
        
        // Add event listener
        if (themeToggle) {
          themeToggle.addEventListener('click', toggleTheme);
        }
        
        // Listen for system theme changes
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
          if (!localStorage.getItem('theme')) {
            const newTheme = e.matches ? 'dark' : 'light';
            document.documentElement.setAttribute('data-theme', newTheme);
            updateIcon(newTheme);
          }
        });
      }

      // Initialize when DOM is loaded
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initTheme);
      } else {
        initTheme();
      }
    </script>
  </body>
</html>